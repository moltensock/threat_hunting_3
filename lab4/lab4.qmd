---
title: "lab4"
author: "Федосимова Александра Дмитриевна"
format:   
  md:
    output-file: README.md
editor_options: 
  chunk_output_type: inline
---

Анализ данных сетевого трафика с использованием аналитической in-memory СУБД DuckDB

## Цель

1. Изучить возможности СУБД DuckDB для обработки и анализа больших данных \n
2. Получить навыки применения DuckDB совместно с языком программирования R \n
3. Получить навыки анализа метаинфомации о сетевом трафике \n
4. Получить навыки применения облачных технологий хранения, подготовки и анализа данных: Yandex Object Storage, Rstudio Server. \n 

## Исходные данные

1.  Ноутбук с ОС Windows 10
2.  RStudio
3.  Yandex Cloud
4.  Библиотека Arrow
5.  RStudio Server
6.  СУБД DuckDB

## Задание 

Используя язык программирования R, СУБД и пакет duckdb и облачную IDE Rstudio Server, развернутую в Yandex Cloud, выполнить задания и составить отчет.

## Ход работы

### Шаг 1. Импорт данных

```{r}
library(duckdb)
```
```{r}
library(dplyr)
```
```{r} 
library(tidyverse)
```
```{r}
library(lubridate)
```
```{r}
con <- dbConnect(duckdb::duckdb(), dbdir = ":memory:")
dbExecute(conn = con, "INSTALL httpfs; LOAD httpfs;")
```
```{r}
PARQUET_FILE1 = "https://storage.yandexcloud.net/arrow-datasets/tm_data.pqt"

sqlQuery <- "SELECT * FROM read_parquet([?])"
df <- dbGetQuery(con, sqlQuery, list(PARQUET_FILE1))
```

### Шаг 2. Обработка данных

#### 1. Найдите утечку данных из Вашей сети
Важнейшие документы с результатами нашей исследовательской деятельности в области создания вакцин скачиваются в виде больших заархивированных дампов. Один из хостов в нашей сети используется для пересылки этой информации – он пересылает гораздо больше информации на внешние ресурсы в Интернете, чем остальные компьютеры нашей сети. Определите его IP-адрес.

```{r}
leak <- df %>% filter(!grepl('^1[2-4].*', dst)) %>% group_by(src) %>% summarise(bytes_amount = sum(bytes)) %>% top_n(n = 1, wt = bytes_amount)
cat(leak$src)
```

#### 2. Найдите утечку данных 2
Другой атакующий установил автоматическую задачу в системном планировщике cron для экспорта содержимого внутренней wiki системы. Эта система генерирует большое количество трафика в нерабочие часы, больше чем остальные хосты. Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителя из предыдущей задачи.

```{r}
library(lubridate)
df_normaltime_by_traffic_size <- df %>% select(timestamp, src, dst, bytes) %>% filter(!str_detect(dst, '1[2-4].*')) %>% mutate(timestamp = hour(as_datetime(timestamp/1000))) %>% group_by(timestamp) %>% summarize(traffic_size = sum(bytes)) %>% arrange(desc(traffic_size))
df_normaltime_by_traffic_size %>% collect() %>% print(n = Inf)
```
```{r}
df_traffic_no_worktime_anomaly <- df %>% select(timestamp, src, dst, bytes) %>% mutate(timestamp = hour(as_datetime(timestamp/1000))) %>% filter(!str_detect(dst, '1[2-4].*') & timestamp >= 0 & timestamp <= 15)  %>% group_by(src) %>% summarise(bytes_amount = sum(bytes)) %>% arrange(desc(bytes_amount)) %>% collect()
df_traffic_no_worktime_anomaly %>% filter(src != '13.37.84.125') %>% head(1)
```

#### 3. Найдите утечку данных 3
Еще один нарушитель собирает содержимое электронной почты и отправляет в Интернет используя порт, который обычно используется для другого типа трафика. Атакующий пересылает большое количество информации используя этот порт, которое нехарактерно для других хостов, использующих этот номер порта. 
Определите IP этой системы. Известно, что ее IP адрес отличается от нарушителей из предыдущих задач.

```{r}
average_ports_traffic <- df |> select(timestamp, src, dst, port, bytes) %>% filter(!str_detect(dst, '1[2-4].')) %>% group_by(src, port) %>% summarise(bytes_ip_port = sum(bytes)) %>% group_by(port) %>% summarise(average_port_traffic = mean(bytes_ip_port)) %>% arrange(desc(average_port_traffic)) |> collect()
```
```{r}
max_ips_ports_traffic <- df |> select(timestamp, src, dst, port, bytes) %>% filter(!str_detect(dst, '1[2-4].')) %>% group_by(src, port) %>% summarise(bytes_ip_port = sum(bytes)) %>% collect() %>% group_by(port) %>% top_n(1, bytes_ip_port) %>% arrange(desc(bytes_ip_port))
```
```{r}
merged_df <- merge(max_ips_ports_traffic, average_ports_traffic, by = "port")

anomaly_ip_port_traffic <- merged_df %>% mutate(average_anomaly = bytes_ip_port/average_port_traffic) %>% arrange(desc(average_anomaly)) %>% head(1)
anomaly_ip_port_traffic
```

#### 4. Обнаружение канала управления
Зачастую в корпоротивных сетях находятся ранее зараженные системы, компрометация которых осталась незамеченной. Такие системы генерируют небольшое количество трафика для связи с панелью управления бот-сети, но с одинаковыми параметрами – в данном случае с одинаковым номером порта.
Какой номер порта используется бот-панелью для управления ботами?

```{r}
sql <- "SELECT min(bytes),max(bytes),max(bytes) - min(bytes), avg(bytes), port,count(port) FROM read_parquet([?]) group by port having avg(bytes) - min(bytes) < 10 and min(bytes) != max(bytes)"
df <- dbGetQuery(con, sql, list(PARQUET_FILE1))
df %>% select(port)
```

## Оценка результатов

С использованием СУБД DuckDB, RStudio Server, Apache Arrow и языка программирования R были выполнены задания.

## Вывод

СУБД DuckDB - эффективное средство для работы с большими данными.
